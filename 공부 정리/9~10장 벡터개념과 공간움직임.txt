벡터 수학 : Vector3로 위치 ,방향,회전,속도,크기등을 계산함
2d는 (X,Y) 3D는 (x,y,z)를 사용
벡터를 사용할때는 상대좌표와 절대좌표가 존재
상대자표 : 현재 좌표기준에서 이동
절대좌표 : 게임내 좌표로 이동

벡터에서의 크기는 피타고라스의 정리를 사용하여 구함

스칼라 : 벡터에 숫자를  곱하면 그 숫자만큼 속도가 증가
벡터로 방향과 속도를 구하면 속도가 정확히 떨어지지 않기 때문에
1로 정규화된 벡터값을 사용

백터간에 덧셈과 뺄셈이 가능 : 이동한다음 다시 이동하는것을 나타냄

백터 내적 서로 투영되는 값
벡터 외적 : 다른값에 수직인값

Vector3연산
스칼라 곱 벡터에 배수를 취함
Vector3 a = new Vector3( 3,6,9);
a = a * 10; // 10배의 속도를 가짐
덧셈 뺄셈 vector 값끼리 더하거나 빼면됨
정규화
Vector3 a = new Vector3(3,3,3);
Vector3 b = a.normalized;

벡터의 크기 
Vector3.magnitude;
Vector3 a = new Vector3(3,3,3);
float b = a.magnitude;

벡터의 내적
Vector3.Dot(a,b);
벡터의 외적
Vector3.Cross(a,b);

물체 사이의 거리 구하는법
Vector3 a = new Vector3(1,1,1);
Vector3 b = new Vector3(3,3,3);
Vector3 c = b-a;
float distance = c.magnitude;
or

float distance = Vector3.Distance(b,a)

현재 위치에서 목적지로 향하는 방향을 원하는 만큼 이동

방향을 구하는방법은 목적지에서 현재위치를 빼는것
Vector3 direction = (목적지-현재위치).normalized;
이동
Vector3 newPos = 현재위치 + direction* 스칼라값

쿼터니언 :벡터가 속도와 방향을 나타낸다면 쿼터니언은 회전을 나타내는 타입 

유니티에서 transform에 값을 주입할때 transform.postion과 transform,localScale과는다르게
벡터값을 넣을수 없다
 
벡터를 사용하지 않고 쿼터니언을 사용하는이유:
물체를 회전할때 오릴러각 체계에서는 회전을 순서대로 나누어 실행하는데 실행순서에 따라 앞의 회전에 다음 회전이 영향을받아
자유도가 침범당하는 현상이 일어나고, 이런 현상을 짐벌락 형상이라고 함.
짐벌락을 예방하기 위해 벡터대신 짐벌락을 사용
쿼터니언은 한번에 회전하는 값이므로 짐벌락 현상이 없음

유니티에서는 쿼터니언의 직접적인 생성을 막아놓고, 벡터를 사용하여 쿼터니언을 생성하는 메소드 ㅔ공
쿼터니언은 원래 4가지의 변수를 가지고 있으나 벡터와 마찬가지로 3개의 변수만을 사용

Quaternion rotation = Quaternion.Euler(new Vector(0 , 60, 30)); 과 값은 모양으로 사용

쿼터니언 타입을 오일러각 Vector값으로 변환해주는 메소드
Quaternion rotation = Quaternion.Euler(new Vector(0 , 60, 30)); 과 값은 모양으로 사용
Vector3 eulerRoation = rotation.eulerAngles;

쿼터니언에서는 더 회전하는 값을 구할때 더하기가 아니라 곱을 사용, 행렬을 이용하여 이동하기때문에


공간과 움직임
월드는 하나이지만 여러가지의 좌표계를 사용하여 표현
전역 공간, 오브젝트 공간 ,자식공간 등등

전역공간 : 월드의 중심이라는 절대 기준이 존재하는 공간

피벗과 센터 피벗은 오브젝트의 실제 기준점을 기준, 센터는 눈으로 보이는중점 기준으로 오브젝트를 배치

오브젝트 공간 :오브젝트를 생성하고 y좌표를 90을 꺽으면 y축이 z축과 일치하게 되므로 z값을 변경하여도 z값이 변경되는것이 아니라
 x값이 변동된다. 오브젝트가 바라보는시점과, 전역좌표계가 인지하는 값이 다름을 명심하자

오브젝트의 부ㅈ모 자식 관계 : 부모 객체가 움직여지면 자식 객체도 같이 움직여진다. 
상속을 받게 되면 지역공간을 만들어서 부모객채를 중심으로 사물을 보게되기때문이다.
부모 객체가 존재하지 않을경우 전역공간의 원점(0,0,0)을 기준으로 좌표를 측정


전역공간,지역 공간 ,오브젝트 공간
전역공간: 게임월드의 원점을 기준으로 위치를 측정
지역공간 : 자신의 부모 게임 오브제그를 기준으로 위치를 측정
오브젝트 공간 : 자기 자신을 기준으로 위치를 측정

지역공간에서 위치, 회전,스케일값 측정 : 부모 게임오브젝트를 기준으로 측정
지역공간에서 평행이동 : 게임 오브젝트 자신의 방향을 기준으로 평행이동


Vector 속기방법
transform.Translate(new Vector3(0, 1, 0)) == transform.position + transform.up*1; 과 같다
종류 
transform.forward : new Vector(0,0,1));
transform.back : new Vector(0,0,-1));
transform.right : new Vector(1,0,0));
transform.left : new Vector(-1,0,0));
transform.up : new Vector(0,1,0));
transform.down : new Vector(0,-1,0));

f